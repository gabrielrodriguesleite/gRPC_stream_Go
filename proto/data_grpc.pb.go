// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteClient is the client API for Upvote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteClient interface {
	Vote(ctx context.Context, in *Chose, opts ...grpc.CallOption) (Upvote_VoteClient, error)
}

type upvoteClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteClient(cc grpc.ClientConnInterface) UpvoteClient {
	return &upvoteClient{cc}
}

func (c *upvoteClient) Vote(ctx context.Context, in *Chose, opts ...grpc.CallOption) (Upvote_VoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Upvote_ServiceDesc.Streams[0], "/data.Upvote/Vote", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteVoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Upvote_VoteClient interface {
	Recv() (*Option, error)
	grpc.ClientStream
}

type upvoteVoteClient struct {
	grpc.ClientStream
}

func (x *upvoteVoteClient) Recv() (*Option, error) {
	m := new(Option)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpvoteServer is the server API for Upvote service.
// All implementations must embed UnimplementedUpvoteServer
// for forward compatibility
type UpvoteServer interface {
	Vote(*Chose, Upvote_VoteServer) error
	mustEmbedUnimplementedUpvoteServer()
}

// UnimplementedUpvoteServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteServer struct {
}

func (UnimplementedUpvoteServer) Vote(*Chose, Upvote_VoteServer) error {
	return status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedUpvoteServer) mustEmbedUnimplementedUpvoteServer() {}

// UnsafeUpvoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServer will
// result in compilation errors.
type UnsafeUpvoteServer interface {
	mustEmbedUnimplementedUpvoteServer()
}

func RegisterUpvoteServer(s grpc.ServiceRegistrar, srv UpvoteServer) {
	s.RegisterService(&Upvote_ServiceDesc, srv)
}

func _Upvote_Vote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Chose)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpvoteServer).Vote(m, &upvoteVoteServer{stream})
}

type Upvote_VoteServer interface {
	Send(*Option) error
	grpc.ServerStream
}

type upvoteVoteServer struct {
	grpc.ServerStream
}

func (x *upvoteVoteServer) Send(m *Option) error {
	return x.ServerStream.SendMsg(m)
}

// Upvote_ServiceDesc is the grpc.ServiceDesc for Upvote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upvote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.Upvote",
	HandlerType: (*UpvoteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Vote",
			Handler:       _Upvote_Vote_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/data.proto",
}
